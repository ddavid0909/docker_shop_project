Safety of the system.

First of all, it is important to note that ultimate synchronization is done on the database. There is only one database
in either system.
One fun situation that can occur is user logging in, deleting his account, and then using his token to interact with the
system. This situation cannot create many issues. The user can interact with the system only in the next hour, and once
rate limiting is implemented, it can send only up to twenty requests in ten minutes. Calculating, in the worst case, that
is 120 requests. In the worst case, this is 120 new orders that will never interact with the rest of the system since the
courier cannot interact with the order that has no money on it.
A clear way to 'trick' the system is to put the money on the contract and never confirm delivery. This has to
be controlled live. Whoever physically delivers the order must make sure the client confirms the delivery. What is more,
even if this does not happen, admin can get into the system and approve the delivery, since the approval is done through
owner account. The important thing is that the owner himself cannot do anything because he is not of the correct role in
the system. However, if the problem was serious and it could be ascertained that there was a fraud in the system, admin
could open the system and send necessary requests manually.

Couriers cannot do any damage to the system. They can see all orders to be delivered without seeing what products these
are. They cannot see anything else and can only pick up safe orders and take money once the customer approves. Abusive
customers are treated as described above.

Concurrency in the system

First, we need to separate setter requests from getter requests.
POST
Owner: can add products, categories and relationships between the two.
Customer: can add orders and elements of orders.
Courier: can only interact with the existing order.

GET
Owner: can see various statistics on products and their categories. There is only one owner, so ideally, he cannot send
this requests concurrently. He is either adding new products and categories and must wait until the operation is finished,
or he is asking for statistics. What is more, the barely added products can or cannot appear. Whatever happens, they will
have zero categories. This mild mistake has to do with favoring availability to absolute consistency. Such a situation
would be so rare that it does not make sense to slow down the system for it.
If owner gets for himself two or more jwt tokens and accesses from different devices, this can easily lead
to the situation described above.
Doing post from multiple different devices can lead to the following: both check that certain category does not exist
and both add it to their session. During commit, one will fail with error 500, due to the unique constraint
on the category name.
However, product and category are added through the same commit, so a restart of the operation will succeed,
and no inconsistency shall ensue.

Customer:
Can see different products and categories through search operations. He can therefore add to the order
only ids of products that he saw.
One situation that can obviously happen is that he mistakenly tries an id that works because it was not there
when he performed the search, but appeared there later. This can be solved by adding make order and confirm order commands,
where the first adds the order to the database but does not make it a valid order
(that is another column in the table, either 0 or 1)
and returns the order contents to the customer. Customer can then either confirm or deny the order and make a new one.
This is possible but omitted for the sake of simplicity. Can be added later.
Customer cannot see products that do not exist, it can only happen that he do not see products that do exist.
Customer adds order, and courier tries to see created orders, but not all elements of the order are added. This is fine
because only fields from order are used, and they must be there, or order shall not appear in the list at all, and that
is preferring availability to consistency.

Basically, the only operations that are late are the operations that have to do with relationship tables Element and
ProductCategory.
